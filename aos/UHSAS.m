function[]=UHSAS(base_name)
base_name = [];
disp(base_name)
s1 = num2str(base_name);
s1 = ['D:\data\dmf\mag\magaosuhsasM1.00\magaosuhsasM1.00.20130910.000008.raw.magaosm1.uhsas.10s.00.20130910.'];
for i=0:23
    switch i
        case 0
            file_name = strcat(s1,'000000.txt');
        case 1
            file_name = strcat(s1,'010000.txt');
        case 2
            file_name = strcat(s1,'020000.txt');
        case 3
            file_name = strcat(s1,'030000.txt');
        case 4
            file_name = strcat(s1,'040000.txt');
        case 5
            file_name = strcat(s1,'050000.txt');
        case 6
            file_name = strcat(s1,'060000.txt');
        case 7
            file_name = strcat(s1,'070000.txt');
        case 8
            file_name = strcat(s1,'080000.txt');
        case 9
            file_name = strcat(s1,'090000.txt');
        case 10
            file_name = strcat(s1,'100000.txt');
        case 11
            file_name = strcat(s1,'110000.txt');
        case 12
            file_name = strcat(s1,'120000.txt');
        case 13
            file_name = strcat(s1,'130000.txt');
        case 14
            file_name = strcat(s1,'140000.txt');
        case 15
            file_name = strcat(s1,'150000.txt');
        case 16
            file_name = strcat(s1,'160000.txt');
        case 17
            file_name = strcat(s1,'170000.txt');
        case 18
            file_name = strcat(s1,'180000.txt');
        case 19
            file_name = strcat(s1,'190000.txt');
        case 20
            file_name = strcat(s1,'200000.txt');
        case 21
            file_name = strcat(s1,'210000.txt');
        case 22
            file_name = strcat(s1,'220000.txt');
        case 23
            file_name = strcat(s1,'230000.txt');  
        otherwise
            disp(-9999) 
           
    end
    disp(file_name)
%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\TCAP\tcap_uhsasr\20120628000000.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2013/06/11 15:09:33

%% Initialize variables.
filename =file_name;
delimiter = '\t';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');
if(isequal(fileID, -1))
    continue
end

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = [dataArray{:,1:end-1}];
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=2:114;
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of column with dates to serial date numbers using
% date format string (datenum).
for row=1:size(rawData, 1);
    try
        numericData(row, 1) = datenum(dataArray{1}{row}, 'HH:MM:SS.FFF PM');
        raw{row, 1} = numericData(row, 1);
    catch me
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, 1:113);
%rawCellColumns = raw(:, [100,101,102,103,104,105,106,107,108,109,110,111,112,113]);


%% Exclude rows with non-numeric cells
J = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),rawNumericColumns),2); % Find rows with non-numeric cells
rawNumericColumns(J,:) = [];
%rawCellColumns(J,:) = [];

%% Allocate imported array to column variable names
Time = cell2mat(rawNumericColumns(:, 1));
Accum = cell2mat(rawNumericColumns(:, 2));
Scatter = cell2mat(rawNumericColumns(:, 3));
Current = cell2mat(rawNumericColumns(:, 4));
Sample = cell2mat(rawNumericColumns(:, 5));
Ref = cell2mat(rawNumericColumns(:, 6));
Temp = cell2mat(rawNumericColumns(:, 7));
Sheath = cell2mat(rawNumericColumns(:, 8));
Diff = cell2mat(rawNumericColumns(:, 9));
Box = cell2mat(rawNumericColumns(:, 10));
Purge = cell2mat(rawNumericColumns(:, 11));
Pres = cell2mat(rawNumericColumns(:, 12));
Aux = cell2mat(rawNumericColumns(:, 13));
Flow = cell2mat(rawNumericColumns(:, 14));
dt=datenum(s1,'yyyymmdd');
datetime=dt+Time;
%DateTime=datestr(datetime,'yyyyddmm HH:MM:SS'); % Readded
DateTime=datetime;
if(exist('Date_Time', 'var'))                                       % Readded
    ttemp=vertcat(Date_Time,DateTime);                   % Readded
    Date_Time=ttemp;                                              % Readded
else                                                                        %Readded
    Date_Time=DateTime;                                         %Readded
end                                                                         %Readded
ln=length(Temp);
Bin=zeros(ln,99);
Countspercc=Bin;
for i=1:99;
  Bin(:,i)=cell2mat(rawNumericColumns(:,i+14));
end
%% Start Calculations
for j=1:ln
    Countspercc(j,:)=6*Bin(j,:)/Sample(j);
    % Based on a 10 second accumulation time
end
if(exist('CountsCC','var'))
    ttemp=vertcat(CountsCC,Countspercc);
    CountsCC=ttemp;
else
    CountsCC=Countspercc;
end
NumSum=sum(Countspercc,2);
if(exist('TotalCounts','var'))
    ttemp=vertcat(TotalCounts,NumSum);
    TotalCounts=ttemp;
else
    TotalCounts=NumSum;
end    
LowerDiameter=[55,56.64,58.32,60.05,61.84,63.68,65.57,67.52,69.53,71.59,73.72,75.91,78.17,80.5,82.89,85.35,87.89,90.5,93.19,95.96,98.82,101.76,104.78,107.9,111.1,114.41,117.81,121.31,124.92,128.63,132.46,136.39,140.45,144.62,148.92,153.35,157.91,162.61,167.44,172.42,177.54,182.82,188.26,193.86,199.62,205.55,211.66,217.96,224.44,231.11,237.98,245.06,252.34,259.84,267.57,275.53,283.72,292.15,300.84,309.78,318.99,328.48,338.24,348.3,358.65,369.32,380.3,391.6,403.24,415.23,427.58,440.29,453.38,466.86,480.74,495.03,509.75,524.9,540.51,556.58,573.130,590.17,607.71,625.78,644.39,663.54,683.27,703.59,724.5,746.04,768.22,791.06,814.58,838.8,863.74,889.42,915.86,943.09,971.3];
UpperDiameter=[56.64,58.32,60.05,61.84,63.68,65.57,67.52,69.53,71.59,73.72,75.91,78.17,80.5,82.89,85.35,87.89,90.5,93.19,95.96,98.82,101.76,104.78,107.9,111.1,114.41,117.81,121.31,124.92,128.63,132.46,136.39,140.45,144.62,148.92,153.35,157.91,162.61,167.44,172.42,177.54,182.82,188.26,193.86,199.62,205.55,211.66,217.96,224.44,231.11,237.98,245.06,252.34,259.84,267.57,275.53,283.72,292.15,300.84,309.78,318.99,328.48,338.24,348.3,358.65,369.32,380.3,391.6,403.24,415.23,427.58,440.29,453.38,466.86,480.74,495.03,509.75,524.9,540.51,556.58,573.13,590.17,607.71,625.78,644.39,663.54,683.27,703.59,724.5,746.04,768.22,791.06,814.58,838.8,863.74,889.42,915.86,943.09,971.13,1000];
radius=sqrt(LowerDiameter.*UpperDiameter)/2;
diameter=2*radius;
Rmeansum=Countspercc*radius';
Rmean=Rmeansum./NumSum;
if(exist('MeanRadius','var'))
    ttemp=vertcat(MeanRadius,Rmean);
    MeanRadius=ttemp;
else
    MeanRadius=Rmean;
end
radiusinmeters=radius*10^-9;
Vol=(4*pi*(radiusinmeters).^3)/3;
Volsum=10^18*Countspercc*Vol';
if(exist('TotalVolume','var'))
    ttemp=vertcat(TotalVolume,Volsum);
    TotalVolume=ttemp;
else
    TotalVolume=Volsum;
end
Srf=(4*pi*(radiusinmeters).^2);
Srfsum=10^10*Countspercc*Srf';
if(exist('TotalSurface','var'))
    ttemp=vertcat(TotalSurface,Srfsum);
    TotalSurface=ttemp;
else
    TotalSurface=Srfsum;
end
end
%dt=datenum(s1,'yyyyddmm');  % Removed
%ln=8640;                               % Removed
%datetime=dt+(0:ln-1)/ln;       %Removed
%Date_Time=datetime';             %Removed
assignin('base','diameter',diameter);
assignin('base','CountsCC',CountsCC);
assignin('base','TotalCounts',TotalCounts);
assignin('base','MeanRadius',MeanRadius);
assignin('base','TotalVolume',TotalVolume);
assignin('base','TotalSurface',TotalSurface);
assignin('base','Date_Time',Date_Time);
assignin('base','s1',s1);
assignin('base','radius',radius);
%%  Plot Data
figure;
subplot(2,1,1), plot(Date_Time,TotalCounts)
datetick('x');
xlabel('Time');
ylabel('Total N per cc');
legend(s1);
title('MAGIC   UHSAS');
subplot(2,1,2), plot(Date_Time,MeanRadius)
datetick('x');
xlabel('Time');
ylabel('Rmean, nm');
%% Clear temporary variables
clearvars i j filename delimiter formatSpec fileID dataArray ans raw numericData col rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns J;